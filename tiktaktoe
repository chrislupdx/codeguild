class Player:
    name = input("What's your name") #ok it's stored, now what
    token = input("x or o") #print token for where the player goes?

class Board:
    def __init__(self):
initialize Board
initialize players
        self.board = [0,1,2 #not sure how to define  board shape the best way according to my code
                    4,5,6,
                    7,8,9]

    def build_board():
        board = []
        for y in range(B_H):
            board.append([])
        for x in range(B_W):
            board[y].append(' ')
        return Board
B_H= 2
B_W= 2

    def print_board(board):
        for row in board:
            print(row)


        Boardpos = []

    def __repr__(self):

    def move(x, y, player):
        counter = 0
        moves = {1:(0,0), 2:(1,0), 3:(2,0),
                 4:(0,1), 5:(1,1), 6:(2,1),
                 7:(0,2), 8:(1,2), 7:(2,2)}


        p1_moves, p2_moves = steps
        while p1_moves or p2_moves:
            if current_player == 1:
                step = p1_moves.pop(0)
                current_player += 1
                board = make_move(token, int(move), board)
                print_board(board)
            # elif current_player == 2:
            #     move = p2_moves.pop(0)
            #     current_player -= 1
            #     board = make_move(token2, int(move), board)
            #     print_board(board)
         while True:
             try:
                 position = int(input("where do you want to go?")).strip())
                 move = moves[position]



still have to figure out where the keys+values get wired to
take player move iponut
read coordinates
put token on the board
if a player goes somewhere with a token (p1 p2 regardless), return input 'invalid move',

design move structure/ movelist

        playmove = input('')

        even p1 odd p2

        take in input from player
        put in input to Board

   def calculate_winner(self):

    returns true when game board is full
    checks if game is over, returns no more spaces // you/other won!
create 1 or 2 player functionality
#
# build repl
#     read
#     eval
#     play
#     loop

if 10 moves have occurred check if anybody has won.  if somebody has won, signal this and end the game
