# we have the keyword def and some variables
#   def greet_human(): #this is what we need at a minimum to create a funciton
#     print('hellow human!')
#at first we'll probs have a plethora of stuff, but yanno going for reducing complexity?
#what's can we do to make functions useful?
#we can give our variables new functions
# we want to make a process that enables us getting a thing now and how we get it

# def greet_human(name, phone, age): #there is a way to create default variables
# We can tell our servers (IDC what kind of tea you want)
# we can't call a function until it has ALL of the things it needs
#
# def greet_human(name=None):
#     if name:
#         print('hello homan:{}!'.format(name))
#     else:
#         print('hello human')
# greet_human(1, "chris")
# greet_human(2, "human1") #those id can be called through supoer weird shennanigans but will exist
# greet_human

#so we're actually making physical changes to these 14 atom wide things, there's actual re-binding things to do math forus

ARGs and QUARGs
# lets say we have a function with a unspecified number of arguements to pass (like a sum function that can take n number of numbers)
# def sum(*args):
#     total = 0
#     for i in args:
# #total = total + i
#     total += i #total =+ means reassign the total value plus i ()
#     print(args)
#
#
# sum(1,) #this is a tuple(if there is 1 item after the comma it'll be a tuple inevitably): you must have a comma in an 1 item tuple
# sum(1, 3)
# sum(1, 9, 12, 99)

# def show_kwargs(**kwargs): #kwargs are dictionaries(the ** is the imporant part)
#     for key, value in show_kwargs.items()
#     print('*' '* 80)
#     print('The key is: {}'.format(key))
#     print('The value  is: {}'.format(value))
#     print('^' * 80)
# # we get {'key1': 'value1', 'key2'; 'value2'}
#
# the way that keys work here aren't very python, more Js
# show_kwargs(key1='value1', key2='value2')

#things on the level of the global document have access all over the document
#
# def add(num1, num2=5, num3=10) #it has to have anumber passed in but there's num2 and a num3
#     return num1 + num2 + num3
# #when a function returns a value we can use any me of the given value1
# # if we were to return something as
# we want to do 1 and only 1 thing with a function: we want our functions to be resuable. say the update function (which is basically the create+delete functions together.  so if properlly planned, you build your functions out so they take arguments and use then)
#return ends a function

# def greeting(name):
#     if name.lower() == 'chris':
#         return 'get outta here you!'
#     else: #this else isn't needed because if the return on line 60 goes off it just ends the thing
# #         return 'Hey {}!'.format(name)
#
# def (): #def makes shit functions
#     print('a')
#     return 'a'
#
# def b():
#     return 'b'
#     c()
#
# def c():
#     return 'c'
#
# def a():
#     print('a')
#     b()
#     d()
#
# Recursion:
# a = a is not ok (variables can't define themsleves)
# buuut can functions call themselves
# recursion is great for searching unknown things (a folder structures for unknown stuff (if there's a next, go to the next till you can come up etc))
# if it can be done recursively, it can often be done with for and while loops more easily bc faster
#
# Factorials!
# def factorial(n):
#     if n == 0:
#         return 1 #this is our emergency break
#     return n * factorial(n-1)
# print(factorial(5))

# def fibo(n):
#     if n < 2:
#         return 1
#     return fibo(n-1)+ fibo(n-2)
#     fibo()

# file = open('sample.txt')
# text = rile.read()
# print(text)

# text_lines - file.readlines()
#most printed text has a \n at the end of their printed files, so spacing is weird and funny sometimes

# file.close() happens, but it's a painself.
# with open('sample.txt') as file:
#     text = file.read()
#     text_lines = file.read.lines()
#
# print(text)
# print(text_lines)
# #stuff in scope Inindented) after it's done, it'll just close on it's own unprompted

Writing things!
with open('sample.txt', 'w') as f: #the 'w' tells a thing to write
        f.write('Some Words')
with open('sample.txt') as f:
    print(f.read())

instead of changing line 300/500, read it, open it, change it, and
